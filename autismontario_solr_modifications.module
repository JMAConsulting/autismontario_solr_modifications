<?php

require_once 'autismontario_solr_modifications.constants.php';

/**
 * Alter Solr documents before they are sent to Solr for indexing.
 *
 * @param array $documents
 *   An array of SearchApiSolrDocument objects ready to be indexed, generated
 *   from $items array.
 * @param SearchApiIndex $index
 *   The search index for which items are being indexed.
 * @param array $items
 *   An array of items being indexed.
 */
function autismontario_solr_modifications_search_api_solr_documents_alter(&$documents, \Drupal\search_api\IndexInterface $index, array $items) {
  // Adds a "foo" field with value "bar" to all documents.
  foreach ($documents as $id => $document) {
    if ($document->ss_search_api_datasource == 'entity:civicrm_event') {
      $parts = explode('/', $document->ss_search_api_id);
      $id = substr($parts[1], 0, strpos($parts[1], ':'));
      $document->setField('tm_X3b_en_chapters', getEventChapters($id));
      $document->setField('tm_X3b_und_custom_' . CONTACT_CHAPTER_FIELD, getEventChapters($id));
      $document->setField('tm_X3b_fr_chapters', getEventChapters($id, 'fr'));
      if (isset($document->locs_field_geolocation)) {
        $document->setField('locm_field_geolocation_2', [$document->locs_field_geolocation]);
        $document->setField('locs_field_geolocation_2', $document->locs_field_geolocation);
      }
      $solrField = 'ss_' . EVENT_LANGUAGE_FIELD;
      if (isset($document->{$solrField})) {
        $language = [$document->{$solrField}];
        if ($document->{$solrField} === 'Bilingual') {
          $language = ['English', 'french'];
        }
        $document->setField('tm_X3b_und_' . CONTACT_LANGUAGE_FIELD, $language);
      }
      $nodeEventChapters = getNodeEventChapters($id);
      if (!empty($nodeEventChapters)) {
        $document->setField(DRUPAL_CHAPTER_FIELD, $nodeEventChapters);
      }
      $document->setField('ss_type', 'Event');
      if (isset($document->locs_field_geolocation)) {
        $document->setField('bs_field_mapped_location', 'true');
      }
    }
    if ($document->ss_search_api_datasource == 'entity:civicrm_contact') {
      if(isset($document->ss_contact_type) && $document->ss_contact_type != "Provider") {
      }
      if (isset($document->ss_contact_sub_type) && $document->ss_contact_sub_type == "service_provider") {
        if (!empty($document->bs_field_mapped_location_1)) {
          $document->setField('bs_field_mapped_location', TRUE);
        }
        $solrField = 'tm_X3b_und_custom_' . SERVICE_LISTING_FIELD;
        $document->setField('ss_type', 'Service Listing');
        if (isset($document->{$solrField})) {
          $values = $document->{$solrField};
          $frValues = $enValues = [];
          $field = SERVICE_LISTING_FIELD;
          if (is_array($values)) {
            foreach ($values as $key => $value) {
              $values[$key] = getOptionLabel($field, $value);
              $values[$key . '_fr'] = getOptionLabel($field, $value, 'fr');
              $enValues[$key] = getOptionLabel($field, $value);
              $frValues[$key] = getOptionLabel($field, $value, 'fr');
            }
          }
          else {
            $originalValue = $values;
            $values = [getOptionLabel($field, $originalValue), getOptionLabel($field, $originalValue, 'fr')];
            $enValues = getOptionLabel($field, $originalValue);
            $frValues = getOptionLabel($field, $originalValue, 'fr');
          }
          $document->setField('tm_X3b_en_custom_' . $field, $enValues);
          $document->setField('tm_X3b_fr_custom_' . $field, $frValues);
          $document->setField('ism_X3b_und_custom_' . $field, $values);
          $document->setField('tm_X3b_und_custom_' . $field, $values);
        }
        $solrField = 'tm_X3b_und_custom_' . SERVICES_PROVIDED_FIELD;
        if (isset($document->{$solrField})) {
          $values = $document->{$solrField};
          $field = SERVICES_PROVIDED_FIELD;
          $frValues = $enValues = [];
          if (is_array($values)) {
            foreach ($values as $key => $value) {
              $values[$key] = getOptionLabel($field, $value);
              $values[$key . '_fr'] = getOptionLabel($field, $value, 'fr');
              $enValues[$key] = getOptionLabel($field, $value);
              $frValues[$key] = getOptionLabel($field, $value, 'fr');
            }
          }
          else {
            $originalValue = $values;
            $values = [getOptionLabel($field, $originalValue), getOptionLabel($field, $originalValue, 'fr')];
            $enValues = getOptionLabel($field, $originalValue);
            $frValues = getOptionLabel($field, $originalValue, 'fr');
          }
          $document->setField('tm_X3b_fr_custom_' . $field, $frValues);
          $document->setField('tm_x3b_en_custom_' . $field, $enValues);
          $document->setField('tm_X3b_und_custom_' . $field, $values);
        }
        $solrField = 'tm_X3b_und_' . AGE_GROUPS_SERVED_FIELD;
        if (isset($document->{$solrField})) {
          $values = $document->{$solrField};
          $field = str_replace('custom_', '', AGE_GROUPS_SERVED_FIELD);
          $frValues = $enValues = [];
          if (is_array($values)) {
            foreach ($values as $key => $value) {
              $values[$key] = getOptionLabel($field, $value);
              $values[$key . '_fr'] = getOptionLabel($field, $value, 'fr');
              $enValues[$key] = getOptionLabel($field, $value);
              $frValues[$key] = getOptionLabel($field, $value, 'fr');
            }
          }
          else {
            $originalValue = $values;
            $values = [getOptionLabel($field, $originalValue), getOptionLabel($field, $originalValue, 'fr')];
            $enValues = getOptionLabel($field, $originalValue);
            $frValues = getOptionLabel($field, $originalValue, 'fr');
          }
          $document->setField('tm_X3b_fr_custom_' . $field, $frValues);
          $document->setField('tm_X3b_en_custom_' . $field, $enValues);
          $document->setField('tm_X3b_und_custom_' . $field, $values);
        }
        $solrField = 'sm_' . ABA_CREDENTIALS_FIELD;
        if (isset($document->{$solrField})) {
          $values = $document->{$solrField};
          $originalValue = $values;
          $field = str_replace('custom_', '', ABA_CREDENTIALS_FIELD);
          $frValues = $enValues = [];
          if (is_array($values)) {
            foreach ($values as $key => $value) {
              $values[$key] = getOptionLabel($field, $value);
              $values[$key . '_fr'] = getOptionLabel($field, $value, 'fr');
              $enValues[$key] = getOptionLabel($field, $value);
              $frValues[$key] = getOptionLabel($field, $value, 'fr');
            }
          }
          else {
            $values = [getOptionLabel($field, $originalValue), getOptionLabel($field, $originalValue, 'fr')];
            $enValues = getOptionLabel($field, $originalValue);
            $frValues = getOptionLabel($field, $originalValue, 'fr');
          }
          $document->setField('sm_fr_custom_' . $field, $frValues);
          $document->setField('sm_en_custom_' . $field, $enValues);
          $document->setField('sm_custom_' . $field, $originalValue);
          $document->setField('sm_und_custom_' . $field, $originalValue);
        }
        $document->removeField('ss_' . ABA_CREDENTIALS_FIELD);
        $solrField = 'tm_X3b_und_custom_' . CONTACT_CHAPTER_FIELD;
        if (isset($document->{$solrField})) {
          $values = $document->{$solrField};
          $chapterIds = [];
          if (is_array($document->{$solrField})) {
            foreach ($document->{$solrField} as $chapter) {
              if (!empty($chapter)) {
                $chapterIds[] = getChapterId($chapter);
              }
            }
          }
          else {
            if (!empty($document->{$solrField})) {
              $chapterIds[] = getChapterId($document->{$solrField});
            }
          }
          if (!empty($chapterIds)) {
            $document->setField(DRUPAL_CHAPTER_FIELD, $chapterIds);
          }
        }
        $solrField = 'tm_X3b_und_' . ABA_SERVICES_PROVIDED;
        if (!empty($document->{$solrField})) {
          $document->setField($solrField, 'Provides ABA Services');
          $document->setField('tm_X3b_fr_' . ABA_SERVICES_PROVIDED, 'Fournissez des services en ACA?');
        }
        $solrField = 'tm_X3b_und_' . ACCEPTING_NEW_CLIENTS_FIELD;
        if (!empty($document->{$solrField})) {
          $document->setField($solrField, 'Accepting new clients');
          $document->setField('tm_X3b_fr_' . ACCEPTING_NEW_CLIENTS_FIELD, 'Accepte de nouveaux clients');
        }
        $parts = explode('/', $document->ss_search_api_id);
        $id = substr($parts[1], 0, strpos($parts[1], ':'));
        $primaryAddress = civicrm_api('Address', 'get', ['contact_id' => $id, 'is_primary' => 1]);
        if (!empty($primaryAddress['values']) && !empty($primaryAddress['values'][$primaryAddress['id']]['geo_code_1'])) {
          $document->setField('bs_field_mapped_location', 'true');
        }
        $campDateFields = [CAMP_TO_FIELD, CAMP_FROM_FIELD];
        foreach ($campDateFields as $campField) {
          $solrField = 'dm_' . $campField;
          if (!empty($document->$solrField)) {
            $parts = explode('/', $document->ss_search_api_id);
            $id = substr($parts[1], 0, strpos($parts[1], ':'));
            $dates = [];
            $columnName = civicrm_api3('CustomField', 'getsingle', ['id' => str_replace('custom_', '', $campField)])['column_name'];
            $mysqlDates = \CRM_Core_DAO::executeQuery("SELECT {$columnName} FROM civicrm_value_service_listi_72 WHERE entity_id = %1", [1 => [$id, 'Positive']])->fetchAll();
            foreach ($mysqlDates as $mysqlDate) {
              $dates[] = date('Y-m-d', strtotime($mysqlDate[$columnName])) . 'T12:00:00Z';
            }
            $document->setField('dm_' . $campField, $dates);
          }
        }
        $document->setField('tm_organization_name', str_replace('Self-employed ', '', $document->tm_organization_name));
      }
      else {
        $document->setField('ss_type', 'Contact');
      }
    }
  }
}


/**
 * Implements hook_entity_type_alter().
 */
function autismontario_solr_modifications_entity_type_alter(array &$entity_types) {
 // $entity_types['civicrm_contact']->setHandlerClass('access', CustomAccessHandler::class);
}

function getOptionLabel($customFieldID, $optionValue, $language = 'en') {
  \Drupal::service('civicrm')->initialize();
  $customFieldDetails = civicrm_api3('CustomField', 'getsingle', ['id' => $customFieldID]);
  $params = [
    'option_group_id' => $customFieldDetails['option_group_id'],
    'value' => $optionValue,
  ];

  if ($language == 'fr') {
    $params['options'] = ['language' => 'fr_CA'];
  }
  else {
    $params['options'] = ['language' => 'en_US'];
  }
  $optionValue = civicrm_api3('OptionValue', 'getsingle', $params);
  return $optionValue['label'];
}

function getEventChapters($eventId, $language = 'en') {
  \Drupal::service('civicrm')->initialize();
  $params = [
    'id' => $eventId,
    'return' => ['custom_' . EVENT_CHAPTER_FIELD],
  ];
  if ($language == 'fr') {
    $params['options'] = ['language' => 'fr_CA'];
  }
  return civicrm_api3('Event', 'getsingle', $params)['custom_' . EVENT_CHAPTER_FIELD] ?? NULL;
}

function getNodeEventChapters($eventId) {
  $chapterIds = [];
  $chapters = getEventChapters($eventId);
  if (is_array($chapters)) {
    foreach ($chapters as $chapter) {
      $chapterIds[] = getChapterId($chapter);
    }
  }
  else {
    $chapterIds[] = getChapterId($chapters);
  }
  return $chapterIds;
}

function getChapterId($chapter) {
  $db_query = \Drupal::database()->select('taxonomy_term__field_civicrm_chapter_value', 'tn');
  $entity_id_field = $db_query->addField('tn', 'entity_id');
  $db_query->condition('tn.field_civicrm_chapter_value_value', $chapter);
  $result = $db_query->execute()->fetchAll();
  if (!empty($result)) {
    return $result[0]->{$entity_id_field};
  }
}

/**
 * Implements hook_cron().
 */
function autismontario_solr_modifications_cron() {
  \Drupal::service('civicrm')->initialize();
  $db_query = \Drupal::database()->select('search_api_item', 'sai');
  $entity_id_field = $db_query->addField('sai', 'item_id');
  $db_query->condition('sai.datasource', 'entity:civicrm_event');
  $results = $db_query->execute()->fetchAll();
  $index = \Drupal\search_api\Entity\Index::load('default');
  foreach ($results as $res) {
    $id = $res->{$entity_id_field};
    $parts = explode('/', $id);
    $event_id = substr($parts[1], 0, strpos($parts[1], ':'));
    $index->trackItemsUpdated('entity:civicrm_event', [$event_id . ':und']);
  }
}

/**
 * Implements hook_civicrm_postProcess().
 */
function autismontario_solr_modifications_civicrm_postProcess($formName, &$form) {
  if ($formName == "CRM_Contact_Form_Contact") {
    if (!empty($form->_contactId) && count(preg_grep('/^' . STATUS_FIELD . '_[\d]*/', array_keys($form->_submitValues))) > 0) {
      $index = \Drupal\search_api\Entity\Index::load('default');
      $db_query = \Drupal::database()->select('search_api_item', 'sai');
      $entity_id_field = $db_query->addField('sai', 'item_id');
      $db_query->condition('sai.datasource', 'entity:civicrm_contact');
      $db_query->condition('sai.item_id', 'entity:civicrm_contact/' . $form->_contactId . ':und');
      $results = $db_query->execute()->fetchAll();
      if (empty($results)) {
        $index->trackItemsInserted('entity:civicrm_contact', [$form->_contactId . ':und']);
      }
      else {
        $index->trackItemsUpdated('entity:civicrm_contact', [$form->_contactId . ':und']);
      }
    }
  }
  if ($formName == "CRM_Contact_Form_Inline_CustomData") {
    if (!empty($form->_submitValues['cid']) && count(preg_grep('/^' . STATUS_FIELD . '_[\d]*/', array_keys($form->_submitValues))) > 0) {
      $index = \Drupal\search_api\Entity\Index::load('default');
      $db_query = \Drupal::database()->select('search_api_item', 'sai');
      $entity_id_field = $db_query->addField('sai', 'item_id');
      $db_query->condition('sai.datasource', 'entity:civicrm_contact');
      $db_query->condition('sai.item_id', 'entity:civicrm_contact/' . $form->_submitValues['cid'] . ':und');
      $results = $db_query->execute()->fetchAll();
      if (empty($results)) {
        $index->trackItemsInserted('entity:civicrm_contact', [$form->_submitValues['cid'] . ':und']);
      }
      else {
        $index->trackItemsUpdated('entity:civicrm_contact', [$form->_submitValues['cid'] . ':und']);
      }
    }
  }
}

/**
 * Implement hook_civicrm_merge().
 *
 * We need to do this to track merging of contacts and ensure that the deleted one is removed from the solr index.
 */
function autismontario_solr_modifications_civicrm_merge($type, &$data, $mainId = NULL, $otherId = NULL, $tables = NULL) {
  if ($type === 'sqls') {
    $ids = [$otherId, $mainId];
    foreach ($ids as $contact_id) {
      $check = civicrm_api3('Contact', 'get', [
        'id' => $contact_id,
        SERVICE_PROVIDER_STATUS => 'Approved',
        'contact_sub_type' => ['LIKE' => '%' . "Service" . '%'],
      ]);
      if (!empty($check['count'])) {
        $index = \Drupal\search_api\Entity\Index::load('default');
        $db_query = \Drupal::database()->select('search_api_item', 'sai');
        $entity_id_field = $db_query->addField('sai', 'item_id');
        $db_query->condition('sai.datasource', 'entity:civicrm_contact');
        $db_query->condition('sai.item_id', 'entity:civicrm_contact/' . $contact_id . ':und');
        $results = $db_query->execute()->fetchAll();
        if (empty($results) && $contact_id !== $otherId) {
          $index->trackItemsInserted('entity:civicrm_contact', [$contact_id . ':und']);
        }
        else {
          if ($contact_id === $otherId) {
            $index->trackItemsDeleted('entity:civicrm_contact', [$contact_id . ':und']);
          }
          else {
            $index->trackItemsUpdated('entity:civicrm_contact', [$contact_id . ':und']);
          }
        }
      }
    }
  }
}

/**
 * Change the way the index's field names are mapped to Solr field names.
 *
 * @param \Drupal\search_api\IndexInterface $index
 *   The index whose field mappings are altered.
 * @param array $fields
 *   An associative array containing the index field names mapped to their Solr
 *   counterparts. The special fields 'search_api_id' and 'search_api_relevance'
 *   are also included.
 */
function autismontario_solr_modifications_search_api_solr_field_mapping_alter(\Drupal\search_api\IndexInterface $index, array &$fields) {
  $campDateFields = [CAMP_TO_FIELD, CAMP_FROM_FIELD];
  foreach ($campDateFields as $campDateField) {
    $fields[$campDateField] = 'dm_' . $campDateField;
  }
}
